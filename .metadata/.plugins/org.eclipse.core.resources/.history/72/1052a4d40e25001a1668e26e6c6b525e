package com.simen.sorm.core;

import java.util.List;

/**
 * 负责查询（对外提供服务的核心类）
 * @author simen
 */
public abstract class Query {
	/**
	 * 直接执行一个DML语句
	 * @param sql SQL语句
	 * @param params 参数
	 * @return 执行SQL语句后，影响了多少行的数据
	 */
	public int executeDML(String sql, Object[] params);
	
	
	/**
	 * 将一个对象存储到数据库中
	 * @param obj 要存储的对象
	 */
	public void insert(Object obj);
	
	/**
	 * 删除clas表示类对应的表中的记录，根据主键值id匹配
	 * @param clas 主键值
	 * @param id
	 */
	public void delete(Class clas, Object id);
	
	/**
	 * 删除obj在数据库中的记录
	 * @param obj
	 */
	public void delete(Object obj);
	
	/**
	 * 更新对象对应的记录，更新指定的属性
	 * @param obj 要更新的对象
	 * @param fields 要更新的属性
	 * @return 被影响的行数
	 */
	public int update(Object obj, String[] fields);
	
	/**
	 * 查询返回多行记录，并将每行记录封装到cla指定的类的对象中。多行多列
	 * @param sql 查询SQL语句
	 * @param clas 封装结果的Javabean类的class对象
	 * @param params sql参数
	 * @return 查询结果
	 */
	public List queryRows(String sql, Class clas, Object[] params);
	
	/**
	 * 查询返回一行记录，并将记录封装到cla指定的类的对象中。一行多列
	 * @param sql 查询SQL语句
	 * @param clas 封装结果的Javabean类的class对象
	 * @param params sql参数
	 * @return 查询结果
	 */
	public Object querySingleRow(String sql, Class clas, Object[] params);
	
	/**
	 * 查询返回一个值，并将该值返回。一行一列
	 * @param sql 查询SQL语句
	 * @param params sql参数
	 * @return 查询结果
	 */
	public Object queryValue(String sql, Object[] params);
	
	/**
	 * 查询返回一个数字，包括int double long等等，并将该值返回。一行一列
	 * @param sql 查询SQL语句
	 * @param params sql参数
	 * @return 查询结果
	 */
	public Number queryNumber(String sql, Object[] params);
}
