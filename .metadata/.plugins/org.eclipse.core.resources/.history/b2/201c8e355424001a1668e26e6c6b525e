package com.simen.sorm.core;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.simen.po.Emp;
import com.simen.sorm.bean.ColumnInfo;
import com.simen.sorm.bean.TableInfo;
import com.simen.sorm.utils.JDBCUtils;
import com.simen.sorm.utils.ReflectUtils;

public class MySqlQuery implements Query{
	
	public static void main(String[] args) {
		Emp yongxi = new Emp();
		yongxi.setAge(18);
		yongxi.setEmpname("yongxi");
		yongxi.setSalary((double) 90000);
		new MySqlQuery().insert(yongxi);
	}

	@Override
	public int executeDML(String sql, Object[] params) {
		// TODO Auto-generated method stub
		Connection con = DBManager.getMysqlConnection();
		PreparedStatement stmt = null;
		try {
			stmt = con.prepareStatement(sql);
			JDBCUtils.fillStatement(stmt, params);
			System.out.println(stmt);
			return stmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			DBManager.closeAll(null, stmt, con);
		}
		return 0;
	}

	/**
	 * 将一个对象存储到数据库中
	 * 把对象中不为null的属性往数据库中存储！如果数字为null则放0
	 * @param 要存储的对象
	 */
	@Override
	public void insert(Object obj) {
		// insert into tableName (field1,field2,field3) values (?,?,?)
		Class c = obj.getClass();
		TableInfo tableInfo = TableContext.poClassTableMap.get(c);
		String tname = tableInfo.getTname();
		List<Object> notNullParams = new ArrayList<Object>();
		
		StringBuilder sql = new StringBuilder("insert into "+tname+" (");
		Field[] fields = c.getDeclaredFields();
		int notNullFieldsCount = 0;
		for(Field field: fields) {
			String fieldName = field.getName();
			Object fieldValue = ReflectUtils.invokeGet(fieldName, obj);
			
			if(fieldValue!=null) {
				notNullFieldsCount++;
				sql.append(fieldName+",");
				notNullParams.add(fieldValue);
			}
		}
		sql.setCharAt(sql.length()-1, ')');
		sql.append(" values (");
		for(int i=0;i<notNullFieldsCount;i++) {
			sql.append("?,");
		}
		sql.setCharAt(sql.length()-1, ')');
		executeDML(sql.toString(), notNullParams.toArray());
	}

	@Override
	public void delete(Class clas, Object id) {
		// 样例：Emp.class, id=2 ---> delete from emp where id=2
		TableInfo tableInfo = TableContext.poClassTableMap.get(clas);
		String tname = tableInfo.getTname();
		//获得主键字段名称 （主键不一定叫id！！）
		ColumnInfo primKey = tableInfo.getPrimKey();
		String sql = "delete from "+tname+" where "+primKey.getName()+"=?";
		executeDML(sql, new Object[] {id});
	}

	@Override
	public void delete(Object obj) {
		TableInfo tableInfo = TableContext.poClassTableMap.get(obj.getClass());
		String tname = tableInfo.getTname();
		ColumnInfo primKey = tableInfo.getPrimKey();
		String sql = "delete from " + tname + " where " + primKey.getName() + "=?";
		executeDML(sql, new Object[] { ReflectUtils.invokeGet(primKey.getName(), obj) });
	}

	@Override
	public int update(Object obj, String[] fields) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public List queryRows(String sql, Class clas, Object[] params) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object querySingleRow(String sql, Class clas, Object[] params) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object queryValue(String sql, Object[] params) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Number queryNumber(String sql, Object[] params) {
		// TODO Auto-generated method stub
		return null;
	}

}
